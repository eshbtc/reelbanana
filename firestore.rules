rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User API keys - DENY ALL CLIENT ACCESS (server-side only)
    match /user_api_keys/{userId} {
      allow read, write: if false; // Only server-side service can access
    }
    
    // Projects - users can only access their own projects
    match /projects/{projectId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;

      // Scenes subcollection under a project (owner-only)
      match /scenes/{sceneIndex} {
        allow read, write: if request.auth != null &&
          // Owner check against parent project doc
          request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.userId;
      }
    }
    
    // Generated images cache - allow shared cache for cost control
    match /generated_images_cache/{cacheId} {
      allow read: if true; // Allow public read for shared cache benefits
      allow write: if request.auth != null; // Only authenticated users can write
    }
    
    // Public movies (gallery)
    // - Allow public reads so the gallery is visible without auth (even with App Check)
    // - Allow authenticated users to create/update/delete their own entries
    match /public_movies/{movieId} {
      allow read: if true; // Allow public access even with App Check enabled
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['userId', 'title', 'createdAt']) &&
        request.resource.data.userId is string &&
        request.resource.data.title is string &&
        request.resource.data.createdAt is timestamp &&
        // Validate optional fields if present
        (!request.resource.data.keys().hasAny(['thumbnailUrl']) || request.resource.data.thumbnailUrl is string) &&
        (!request.resource.data.keys().hasAny(['description']) || request.resource.data.description is string) &&
        (!request.resource.data.keys().hasAny(['tags']) || request.resource.data.tags is list);
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // Prevent userId changes
        request.resource.data.userId == resource.data.userId &&
        // Validate field types if being updated
        (!request.resource.data.keys().hasAny(['title']) || request.resource.data.title is string) &&
        (!request.resource.data.keys().hasAny(['description']) || request.resource.data.description is string) &&
        (!request.resource.data.keys().hasAny(['tags']) || request.resource.data.tags is list);
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Usage records - users can only access their own records (collection name is 'usage')
    match /usage/{recordId} {
      allow read: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Usage events for credit operations - users can only access their own events
    match /usage_events/{eventId} {
      allow read: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Wizard metrics for analytics - users can only create their own metrics
    match /wizard_metrics/{metricId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read, write: if false; // Only allow creation, not reading/writing existing metrics
    }

    // Job progress (read-only for clients; writes are server-side Admin SDK)
    match /job_progress/{jobId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Brand Kits (Pro/Studio feature) - owner-only access
    match /brandKits/{brandKitId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null &&
        request.auth.uid == resource.data.userId;
    }

    // Review Links - public read for active links; owner manages
    match /reviewLinks/{reviewLinkId} {
      // Owner can create/update/delete
      allow create: if request.auth != null &&
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if request.auth != null &&
        request.auth.uid == resource.data.createdBy;

      // Public read for active links (security by unguessable token)
      allow read: if resource != null && resource.data.status == 'active';
    }

    // Review Comments - public read for active links; public create if comments allowed
    match /reviewComments/{commentId} {
      function link() {
        return get(/databases/$(database)/documents/reviewLinks/$(request.resource.data.reviewLinkId));
      }
      function linkByResource() {
        return get(/databases/$(database)/documents/reviewLinks/$(resource.data.reviewLinkId));
      }

      // Read: allowed if linked review link is active
      allow read: if resource != null && linkByResource().data.status == 'active';

      // Create: allowed if linked review link is active and allows comments
      allow create: if link().data.status == 'active' && 
        'comment' in link().data.permissions;

      // Update/Delete: only owner (project owner) may modify comments
      allow update, delete: if request.auth != null && 
        linkByResource().data.createdBy == request.auth.uid;
    }

    // Review Approvals - public read for active links; public create if approvals allowed
    match /reviewApprovals/{approvalId} {
      function link() {
        return get(/databases/$(database)/documents/reviewLinks/$(request.resource.data.reviewLinkId));
      }
      function linkByResource() {
        return get(/databases/$(database)/documents/reviewLinks/$(resource.data.reviewLinkId));
      }

      // Read: allowed if linked review link is active
      allow read: if resource != null && linkByResource().data.status == 'active';

      // Create: allowed if linked review link is active and allows approvals
      allow create: if link().data.status == 'active' && 
        'approve' in link().data.permissions;

      // Update/Delete: only owner (project owner) may modify approvals
      allow update, delete: if request.auth != null && 
        linkByResource().data.createdBy == request.auth.uid;
    }

    // Presence tracking - users can read/write their own presence
    match /presence/{presenceId} {
      allow read, write: if request.auth != null;
    }

    // Project versions - owner-only access
    match /projects/{projectId}/versions/{versionId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.userId;
    }

    // Project comments - owner-only access
    match /projects/{projectId}/comments/{commentId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.userId;
    }

    // Notifications - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }

    // Credit transactions - users can only access their own transactions
    match /credit_transactions/{transactionId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }

    // Demo characters - public read access
    match /demo_characters/{characterId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}
