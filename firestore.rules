rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User API keys - DENY ALL CLIENT ACCESS (server-side only)
    match /user_api_keys/{userId} {
      allow read, write: if false; // Only server-side service can access
    }
    
    // Projects - users can only access their own projects
    match /projects/{projectId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;

      // Scenes subcollection under a project (owner-only)
      match /scenes/{sceneIndex} {
        allow read, write: if request.auth != null &&
          // Owner check against parent project doc
          request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.userId;
      }
    }
    
    // Generated images cache - allow shared cache for cost control
    match /generated_images_cache/{cacheId} {
      allow read: if true; // Allow public read for shared cache benefits
      allow write: if request.auth != null; // Only authenticated users can write
    }
    
    // Public movies (gallery)
    // - Allow public reads so the gallery is visible without auth (even with App Check)
    // - Allow authenticated users to create/update/delete their own entries
    match /public_movies/{movieId} {
      allow read: if true; // Allow public access even with App Check enabled
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['userId', 'title', 'createdAt']) &&
        request.resource.data.userId is string &&
        request.resource.data.title is string &&
        request.resource.data.createdAt is timestamp &&
        // Validate optional fields if present
        (!request.resource.data.keys().hasAny(['thumbnailUrl']) || request.resource.data.thumbnailUrl is string) &&
        (!request.resource.data.keys().hasAny(['description']) || request.resource.data.description is string) &&
        (!request.resource.data.keys().hasAny(['tags']) || request.resource.data.tags is list);
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // Prevent userId changes
        request.resource.data.userId == resource.data.userId &&
        // Validate field types if being updated
        (!request.resource.data.keys().hasAny(['title']) || request.resource.data.title is string) &&
        (!request.resource.data.keys().hasAny(['description']) || request.resource.data.description is string) &&
        (!request.resource.data.keys().hasAny(['tags']) || request.resource.data.tags is list);
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Usage records - users can only access their own records (collection name is 'usage')
    match /usage/{recordId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
  }
}
