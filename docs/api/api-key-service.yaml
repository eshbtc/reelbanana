openapi: 3.0.3
info:
  title: ReelBanana API Key Service
  version: 1.0.0
servers:
  - url: https://reel-banana-api-key-service-223097908182.us-central1.run.app
  - url: http://localhost:8085
components:
  securitySchemes:
    AppCheck:
      type: apiKey
      in: header
      name: X-Firebase-AppCheck
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: string }
        requestId: { type: string }
paths:
  /store-api-key:
    post:
      summary: Store an encrypted API key (server-side)
      security:
        - AppCheck: []
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apiKey]
              properties:
                apiKey: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  requestId: { type: string }
        '4XX': { description: Client error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '5XX': { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /use-api-key:
    post:
      summary: Proxy a Gemini content generation request using stored API key
      security:
        - AppCheck: []
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt: { type: string }
                model: { type: string, default: gemini-2.5-flash }
      responses:
        '200':
          description: Gemini API response passthrough
          content:
            application/json:
              schema:
                type: object
        '4XX': { description: Client error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '5XX': { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /check-api-key:
    get:
      summary: Check if the user has a stored API key
      security:
        - AppCheck: []
        - FirebaseAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasApiKey: { type: boolean }
                  requestId: { type: string }
        '4XX': { description: Client error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '5XX': { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /remove-api-key:
    delete:
      summary: Remove the stored API key
      security:
        - AppCheck: []
        - FirebaseAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  requestId: { type: string }
        '4XX': { description: Client error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '5XX': { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
